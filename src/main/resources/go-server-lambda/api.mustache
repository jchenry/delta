
{{>partial_header}}

package {{packageName}}

import "net/http"
import "context"

{{#operations}}
{{#operation}}

//{{#isDeprecated}}DEPRECATED{{/isDeprecated}} {{nickname}}Func - {{{summary}}}
type {{nickname}}Func func(ctx context.Context{{#allParams}}, {{paramName}}Param {{dataType}}{{/allParams}})(Response, error)

//{{#isDeprecated}}DEPRECATED{{/isDeprecated}} Handle{{nickname}} - Web handler for {{{summary}}}
func Handle{{nickname}}( param func(ctx context.Context, paramName string) string, {{nickname}} {{nickname}}Func) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
	var err error
	{{#hasFormParams}}
	{{#isMultipart}}
		if err = r.ParseMultipartForm(32 << 20); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)  
			return
		}
	{{/isMultipart}}
	{{^isMultipart}}
		if err = r.ParseForm(); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)  
			return
		}
	{{/isMultipart}}
	{{/hasFormParams}}
	{{#hasQueryParams}}
		query := r.URL.Query()
	{{/hasQueryParams}}
	{{#allParams}}
		{{#isPathParam}}
		var {{paramName}}Param {{dataType}}
		if err = PathParam(r.Context(), param, &{{paramName}}Param, "{{paramName}}",{{required}}); err != nil {
			http.Error(w, err.Error() ,http.StatusBadRequest)
			return 
		}
		{{/isPathParam}}
		{{#isQueryParam}}
		var {{paramName}}Param {{dataType}}
		if err = QueryParam(query, "{{paramName}}", {{paramName}}Param, {{required}}); err != nil {
			http.Error(w, err.Error() ,http.StatusBadRequest)
			return 
		}
		{{/isQueryParam}}
		{{#isFormParam}}
		var {{paramName}}Param {{dataType}}
		if err = FormParam(r.Form, "{{paramName}}", &{{paramName}}Param, {{required}}); err != nil {
			http.Error(w, err.Error() ,http.StatusBadRequest)
			return 
		}
		{{/isFormParam}}
		{{#isHeaderParam}}
		var {{paramName}}Param {{dataType}}
		if err = HeaderParam(r.Header, "{{paramName}}", &{{paramName}}Param, {{required}}); err != nil {
			http.Error(w, err.Error() ,http.StatusBadRequest)
			return 
		}
		{{/isHeaderParam}}
		{{#isBodyParam}}
		var {{paramName}}Param {{dataType}}
		if err = BodyParam(r.Body, &{{paramName}}Param, func(p any) error{/*TODO*/ return nil} );err != nil {
			http.Error(w, err.Error() ,http.StatusBadRequest)
		}
		{{/isBodyParam}}
	{{/allParams}}
		result, err := {{nickname}}(r.Context(){{#allParams}}, {{paramName}}Param{{/allParams}})
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		// If no error, encode the body and the result code
		EncodeJSONResponse(result.Body, &result.Code,{{#addResponseHeaders}} result.Headers,{{/addResponseHeaders}} w)
	}
}
	{{/operation}}
	{{/operations}}

