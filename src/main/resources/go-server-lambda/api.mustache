
{{>partial_header}}

package {{packageName}}

import "github.com/matryer/way"
import "net/http"
import "context"

{{#operations}}
{{#operation}}
//{{#isDeprecated}}DEPRECATED{{/isDeprecated}} Handle{{nickname}} - {{{summary}}}
func Handle{{nickname}}({{nickname}} func(ctx context.Context{{#allParams}}, {{paramName}}Param {{dataType}}{{/allParams}})(ImplResponse, error)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
	var err error
	{{#hasFormParams}}
	{{#isMultipart}}
		if err = r.ParseMultipartForm(32 << 20); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)  
			return
		}
	{{/isMultipart}}
	{{^isMultipart}}
		if err = r.ParseForm(); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)  
			return
		}
	{{/isMultipart}}
	{{/hasFormParams}}
	{{#hasQueryParams}}
		query := r.URL.Query()
	{{/hasQueryParams}}
	{{#allParams}}
		{{#isPathParam}}
		var {{paramName}}Param {{dataType}}
		err = PathParam(r.Context(), way.Param, &{{paramName}}Param, "{{paramName}}",{{required}})
		if err != nil {
			http.Error(w, err.Error() ,http.StatusBadRequest)
			return 
		}
		{{/isPathParam}}
		{{#isQueryParam}}
		var {{paramName}}Param {{dataType}}
		err = QueryParam(query, "{{paramName}}", {{paramName}}Param, {{required}})	
		if err != nil {
			http.Error(w, err.Error() ,http.StatusBadRequest)
			return 
		}
		{{/isQueryParam}}
		{{#isFormParam}}
		var {{paramName}}Param {{dataType}}
		err = FormParam(r.Form, "{{paramName}}", &{{paramName}}Param, {{required}})	
		if err != nil {
			http.Error(w, err.Error() ,http.StatusBadRequest)
			return 
		}
		{{/isFormParam}}
		{{#isHeaderParam}}
		//func HeaderParam(h http.Header, paramName string, required bool, dt string) (p any, err error) {
		var {{paramName}}Param {{dataType}}
		err = HeaderParam(r.Header, "{{paramName}}", &{{paramName}}Param, {{required}})	
		if err != nil {
			http.Error(w, err.Error() ,http.StatusBadRequest)
			return 
		}
		{{/isHeaderParam}}
		{{#isBodyParam}}
		//func BodyParam(body io.ReadCloser, p any, v func(p any) error) (err error) {
		var {{paramName}}Param {{dataType}}
		err = BodyParam(r.Body, &{{paramName}}Param, func(p any) error{return nil} )
		if err != nil {
			http.Error(w, err.Error() ,http.StatusBadRequest)
		}
		//{{paramName}}Param, err = BodyParam(r.Context(), "{{paramName}}", {{required}}, "{{dataType}}")	
		{{/isBodyParam}}
	{{/allParams}}
		result, err := {{nickname}}(r.Context(){{#allParams}}, {{paramName}}Param{{/allParams}})
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		// If no error, encode the body and the result code
		EncodeJSONResponse(result.Body, &result.Code,{{#addResponseHeaders}} result.Headers,{{/addResponseHeaders}} w)
	}
}
	{{/operation}}
	{{/operations}}

