
{{>partial_header}}

package {{packageName}}

import "github.com/matryer/way"
import "net/http"


{{#operations}}
{{#operation}}
//{{#isDeprecated}}DEPRECATED{{/isDeprecated}} Handle{{nickname}} - {{{summary}}}
func Handle{{nickname}}(w http.ResponseWriter, r *http.Request) {
/**
    //{{httpMethod}} - {{{path}}}
    // operationId: {{operationId}}
    Parameters: 
	{{#allParams}}
        {{paramName}} - {{dataType}}
	{{/allParams}}

    Returns
*/
{{#hasFormParams}}
{{#isMultipart}}
	if err := r.ParseMultipartForm(32 << 20); err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)  
		return
	}
{{/isMultipart}}
{{^isMultipart}}
	if err := r.ParseForm(); err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)  
		return
	}
{{/isMultipart}}
{{/hasFormParams}}


{{#hasQueryParams}}
	query := r.URL.Query()
{{/hasQueryParams}}
{{#allParams}}
	{{#isPathParam}}
	{{paramName}}Param, err := PathParam(r.Context(), way.Param, "{{paramName}}",{{required}}, "{{dataType}}")
	if err != nil {
		http.Error(w, err.Error() ,http.StatusBadRequest)
	}
	{{/isPathParam}}
	{{#isQueryParam}}
	{{paramName}}Param, err := QueryParam(query, "{{paramName}}", {{required}}, "{{dataType}}")	
	if err != nil {
		http.Error(w, err.Error() ,http.StatusBadRequest)
	}
	{{/isQueryParam}}
	{{#isFormParam}}
	{{paramName}}Param, err := FormParam(r.Form, "{{paramName}}", {{required}}, "{{dataType}}")	
	if err != nil {
		http.Error(w, err.Error() ,http.StatusBadRequest)
	}
	{{/isFormParam}}
	{{#isHeaderParam}}
	//func HeaderParam(h http.Header, paramName string, required bool, dt string) (p any, err error) {
	{{paramName}}Param, err := HeaderParam(r.Header, "{{paramName}}", {{required}}, "{{dataType}}")	
	if err != nil {
		http.Error(w, err.Error() ,http.StatusBadRequest)
	}
	{{/isHeaderParam}}
	{{#isBodyParam}}
	//func BodyParam(body io.ReadCloser, p any, v func(p any) error) (err error) {
	var {{paramName}}Param {{dataType}}
	err := BodyParam(r.Body, &{{paramName}}Param, func(p any) error{return nil} )
	if err != nil {
		http.Error(w, err.Error() ,http.StatusBadRequest)
	}
	//{{paramName}}Param, err := BodyParam(r.Context(), "{{paramName}}", {{required}}, "{{dataType}}")	
	{{/isBodyParam}}
{{/allParams}}
	result, err := {{nickname}}(r.Context(){{#allParams}}, {{paramName}}Param{{/allParams}})
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code,{{#addResponseHeaders}} result.Headers,{{/addResponseHeaders}} w)
}
{{/operation}}
{{/operations}}

