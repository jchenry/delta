
{{>partial_header}}

package main

import (
"net/http"
"context"
"encoding/json"
"{{gitHost}}/{{gitUserId}}/{{gitRepoId}}/{{sourceFolder}}/api"
{{#operations}}{{#operation}}{{#allParams}}
{{#isModel}}"{{gitHost}}/{{gitUserId}}/{{gitRepoId}}/{{sourceFolder}}/model"{{/isModel}}
{{#isArray}}{{#items}}{{#isModel}}"{{gitHost}}/{{gitUserId}}/{{gitRepoId}}/{{sourceFolder}}/model"{{/isModel}}{{/items}}{{/isArray}}
{{/allParams}}{{/operation}}{{/operations}}
)

{{#operations}}{{#operation}}


//{{#isDeprecated}}DEPRECATED{{/isDeprecated}} {{nickname}}Func - {{{summary}}}
type {{nickname}}Func func(ctx context.Context{{#allParams}}, {{paramName}} {{> data_type}}{{/allParams}})(api.Response, error)

//{{#isDeprecated}}DEPRECATED{{/isDeprecated}} Handle{{nickname}} - Generates web handler for {{{summary}}}
func Handle{{nickname}}( pathParam func(ctx context.Context, paramName string) string, {{nickname}} {{nickname}}Func) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		if r.Method !="{{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}}" {
			w.WriteHeader(http.StatusMethodNotAllowed)
			return
		}

	var err error
	{{#hasFormParams}}
	{{#isMultipart}}
		if err = r.ParseMultipartForm(32 << 20); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)  
			return
		}
	{{/isMultipart}}
	{{^isMultipart}}
		if err = r.ParseForm(); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)  
			return
		}
	{{/isMultipart}}
	{{/hasFormParams}}
	{{#hasQueryParams}}
		query := r.URL.Query()
	{{/hasQueryParams}}
	{{#allParams}}
		var {{paramName}}Param {{> data_type}}
		{{#isPathParam}}
		if err = api.PathParam(r.Context(), pathParam, &{{paramName}}Param, "{{paramName}}",{{required}}); err != nil {
			http.Error(w, err.Error() ,http.StatusBadRequest)
			return 
		}
		{{/isPathParam}}
		{{#isQueryParam}}
		if err = api.QueryParam(query, "{{paramName}}", {{paramName}}Param, {{required}}); err != nil {
			http.Error(w, err.Error() ,http.StatusBadRequest)
			return 
		}
		{{/isQueryParam}}
		{{#isFormParam}}
		if err = api.FormParam(r.Form, "{{paramName}}", &{{paramName}}Param, {{required}}); err != nil {
			http.Error(w, err.Error() ,http.StatusBadRequest)
			return 
		}
		{{/isFormParam}}
		{{#isHeaderParam}}
		if err = api.HeaderParam(r.Header, "{{paramName}}", &{{paramName}}Param, {{required}}); err != nil {
			http.Error(w, err.Error() ,http.StatusBadRequest)
			return 
		}
		{{/isHeaderParam}}
		{{#isBodyParam}}
		if err = api.BodyParam(r.Body, &{{paramName}}Param, func(p any) error{/*TODO*/ return nil} );err != nil {
			http.Error(w, err.Error() ,http.StatusBadRequest)
		}
		{{/isBodyParam}}
	{{/allParams}}
		result, err := {{nickname}}(r.Context(){{#allParams}}, {{paramName}}Param{{/allParams}})
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		// If no error, encode the body and the result code
		//EncodeJSONResponse(result.Body, &result.Code,{{#addResponseHeaders}} result.Headers,{{/addResponseHeaders}} w)
		w.WriteHeader(result.Code)
		w.Header().Set("Content-Type", "application/json")
		_=json.NewEncoder(w).Encode(result.Body)

	}
}

{{/operation}}
{{/operations}}

